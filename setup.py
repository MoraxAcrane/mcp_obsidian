#!/usr/bin/env python3
"""
üöÄ Enhanced Obsidian MCP Server - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞

–ü—Ä–æ—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Obsidian –∏ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ—Å–ª–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å GitHub.
"""

import os
import sys
import json
import subprocess
from pathlib import Path
import platform

def print_banner():
    """–ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    print("\n" + "="*60)
    print("üß† ENHANCED OBSIDIAN MCP SERVER")
    print("   –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    print("="*60 + "\n")

def print_step(step, description):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —à–∞–≥–∞"""
    print(f"üìã –®–∞–≥ {step}: {description}")
    print("-" * 50)

def print_success(message):
    """–£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
    print(f"‚úÖ {message}")

def print_error(message):
    """–û—à–∏–±–∫–∞"""
    print(f"‚ùå {message}")

def print_warning(message):
    """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    print(f"‚ö†Ô∏è {message}")

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print_step(1, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
    
    if sys.version_info < (3, 8):
        print_error(f"–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –Ω–æ–≤–µ–µ. –£ –≤–∞—Å: {sys.version}")
        print("üì• –°–∫–∞—á–∞–π—Ç–µ Python: https://www.python.org/downloads/")
        return False
    
    print_success(f"Python {sys.version.split()[0]} ‚úì")
    print_success(f"–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}")
    return True

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_step(2, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    try:
        print("üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–∞–∫–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", "-e", ".", "--quiet"
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
            print(result.stderr)
            return False
            
        print_success("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
        return False

def get_vault_path():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø—É—Ç–∏ –∫ Obsidian Vault"""
    print_step(3, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ Obsidian Vault")
    
    print("üìÅ –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É Obsidian Vault")
    print("üí° –≠—Ç–æ –ø–∞–ø–∫–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤–∞—à–∏ .md –∑–∞–º–µ—Ç–∫–∏\n")
    
    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏
    suggested_paths = []
    
    if platform.system() == "Windows":
        suggested_paths = [
            Path.home() / "Documents" / "Obsidian Vault",
            Path.home() / "OneDrive" / "–î–æ–∫—É–º–µ–Ω—Ç—ã" / "Obsidian Vault",
            Path.home() / "OneDrive" / "Documents" / "Obsidian Vault",
        ]
    elif platform.system() == "Darwin":  # macOS
        suggested_paths = [
            Path.home() / "Documents" / "Obsidian Vault",
            Path.home() / "iCloud Drive (Archive)" / "Obsidian Vault",
        ]
    else:  # Linux
        suggested_paths = [
            Path.home() / "Documents" / "Obsidian Vault",
            Path.home() / "Obsidian Vault",
        ]
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏
    existing_paths = [path for path in suggested_paths if path.exists()]
    
    if existing_paths:
        print("üîç –ù–∞–π–¥–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω—ã–µ Vault'—ã:")
        for i, path in enumerate(existing_paths, 1):
            note_count = len(list(path.glob("**/*.md")))
            print(f"  {i}. {path} ({note_count} –∑–∞–º–µ—Ç–æ–∫)")
        print(f"  {len(existing_paths) + 1}. –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—É—Ç—å")
        print()
        
        while True:
            try:
                choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-{len(existing_paths) + 1}): ").strip()
                if choice == str(len(existing_paths) + 1):
                    break
                elif 1 <= int(choice) <= len(existing_paths):
                    return str(existing_paths[int(choice) - 1])
            except (ValueError, IndexError):
                print_warning("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
    
    # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø—É—Ç–∏
    while True:
        vault_path = input("\nüìÇ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ Obsidian Vault: ").strip()
        
        if not vault_path:
            print_warning("–ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            continue
        
        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        vault_path = vault_path.strip('"\'')
        path_obj = Path(vault_path)
        
        if not path_obj.exists():
            print_warning(f"–ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {vault_path}")
            create = input("–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é? (y/n): ").lower().strip()
            if create in ['y', 'yes', '–¥–∞', '–¥']:
                try:
                    path_obj.mkdir(parents=True, exist_ok=True)
                    print_success(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {vault_path}")
                    return vault_path
                except Exception as e:
                    print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {e}")
                    continue
            continue
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ Vault
        md_files = list(path_obj.glob("**/*.md"))
        obsidian_folder = path_obj / ".obsidian"
        
        if md_files or obsidian_folder.exists():
            print_success(f"–ù–∞–π–¥–µ–Ω–æ {len(md_files)} –∑–∞–º–µ—Ç–æ–∫ –≤ Vault")
            return vault_path
        else:
            print_warning("–í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç .md —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ .obsidian –ø–∞–ø–∫–∏")
            proceed = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º –ø—É—Ç–µ–º? (y/n): ").lower().strip()
            if proceed in ['y', 'yes', '–¥–∞', '–¥']:
                return vault_path

def create_config(vault_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print_step(4, "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    config = {
        'vault': {
            'path': vault_path
        },
        'server': {
            'name': 'enhanced-obsidian-mcp',
            'version': '1.0.0'
        },
        'search': {
            'index_content': True,
            'case_sensitive': False,
            'multilingual': True,
            'max_results': 20
        },
        'limits': {
            'max_notes_list': 50,
            'max_search_results': 30,
            'content_preview_chars': 300
        }
    }
    
    config_file = Path("obsidian_mcp_config.yaml")
    
    try:
        import yaml
        with open(config_file, 'w', encoding='utf-8') as f:
            yaml.dump(config, f, default_flow_style=False, allow_unicode=True)
    except ImportError:
        # Fallback: —Å–æ–∑–¥–∞–µ–º YAML –≤—Ä—É—á–Ω—É—é –µ—Å–ª–∏ PyYAML –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        yaml_content = f"""# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Enhanced Obsidian MCP Server
vault:
  path: '{vault_path}'

server:
  name: 'enhanced-obsidian-mcp'
  version: '1.0.0'

search:
  index_content: true
  case_sensitive: false
  multilingual: true
  max_results: 20

limits:
  max_notes_list: 50
  max_search_results: 30
  content_preview_chars: 300
"""
        with open(config_file, 'w', encoding='utf-8') as f:
            f.write(yaml_content)
    
    print_success(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_file.absolute()}")
    return config_file

def test_server():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    print_step(5, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞")
    
    print("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ obsidian-ai-mcp –¥–æ—Å—Ç—É–ø–Ω–∞
        result = subprocess.run([
            "obsidian-ai-mcp", "--help"
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print_success("–ö–æ–º–∞–Ω–¥–∞ obsidian-ai-mcp —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print_warning("–ö–æ–º–∞–Ω–¥–∞ obsidian-ai-mcp –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º python –º–æ–¥—É–ª—å")
            # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å
            result = subprocess.run([
                sys.executable, "-m", "obsidian_mcp.server", "--help"
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                print_success("Python –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
    
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    return False

def generate_integration_configs(vault_path):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ò–ò"""
    print_step(6, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤")
    
    current_dir = str(Path().absolute()).replace('\\', '/')
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Cursor IDE
    cursor_config = {
        "mcpServers": {
            "obsidian": {
                "command": "obsidian-ai-mcp",
                "args": ["--config", "obsidian_mcp_config.yaml"],
                "cwd": current_dir,
                "env": {}
            }
        }
    }
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Python –º–æ–¥—É–ª—å
    cursor_config_alt = {
        "mcpServers": {
            "obsidian": {
                "command": "python",
                "args": ["-m", "obsidian_mcp.server", "--config", "obsidian_mcp_config.yaml"],
                "cwd": current_dir,
                "env": {}
            }
        }
    }
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Claude Desktop
    claude_config = {
        "mcpServers": {
            "obsidian": {
                "command": "obsidian-ai-mcp",
                "args": ["--config", "obsidian_mcp_config.yaml"],
                "cwd": current_dir
            }
        }
    }
    
    print("\n" + "="*60)
    print("üìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –î–õ–Ø –ò–ò-–ê–°–°–ò–°–¢–ï–ù–¢–û–í")
    print("="*60)
    
    print("\nüéØ –î–õ–Ø CURSOR IDE")
    print("üìÅ –§–∞–π–ª: .cursor/mcp.json")
    print("üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç JSON:")
    print("-" * 40)
    print(json.dumps(cursor_config, indent=2, ensure_ascii=False))
    
    print("\nüí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è Cursor (–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç):")
    print("-" * 40)
    print(json.dumps(cursor_config_alt, indent=2, ensure_ascii=False))
    
    print("\nü§ñ –î–õ–Ø CLAUDE DESKTOP")
    print("üìÅ –§–∞–π–ª: claude_desktop_config.json")
    print("üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç JSON:")
    print("-" * 40)
    print(json.dumps(claude_config, indent=2, ensure_ascii=False))
    
    print("\n" + "="*60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print_banner()
    
    try:
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
        if not check_python_version():
            return 1
        
        # –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if not install_dependencies():
            return 1
        
        # –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ Vault
        vault_path = get_vault_path()
        if not vault_path:
            return 1
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_file = create_config(vault_path)
        
        # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if not test_server():
            print_warning("–°–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
        
        # –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        generate_integration_configs(vault_path)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        print("\n" + "="*60)
        print("üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("="*60)
        
        print("\nüìã –ö–ê–ö –ó–ê–ü–£–°–¢–ò–¢–¨:")
        print("1. –õ–æ–∫–∞–ª—å–Ω–æ:           python start.py")
        print("2. –ü—Ä—è–º–∞—è –∫–æ–º–∞–Ω–¥–∞:     obsidian-ai-mcp")
        print("3. –ö–∞–∫ –º–æ–¥—É–ª—å:         python -m obsidian_mcp.server")
        
        print("\nüîß –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ò–ò:")
        print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ JSON –≤—ã—à–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
        print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor IDE –∏–ª–∏ Claude Desktop")
        print("3. MCP —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        
        print("\nüìö –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:")
        print("- README.md           - –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
        print("- MCP_SECURITY_ANALYSIS.md - –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print("- PHASE_2_DETAILED_PLAN.md - –ü–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è")
        
        print(f"\nüìÅ VAULT: {vault_path}")
        print(f"‚öôÔ∏è CONFIG: {Path('obsidian_mcp_config.yaml').absolute()}")
        
        print("\nüöÄ –ì–û–¢–û–í–û –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        
        return 0
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 130
    
    except Exception as e:
        print_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit(main())

"""
üîç Universal Note Finder

–°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –≤–æ –≤—Å–µ–º vault –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–ø–∞–ø–∫–∞–º–∏.
–ó–∞–º–µ–Ω—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π note_path_for_title –Ω–∞ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫.
"""

from pathlib import Path
from typing import Optional, Dict, List, Tuple
import unicodedata
import re


class UniversalNoteFinder:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –≤ vault.
    
    –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã:
    - –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
    - –ü—Ä–æ–±–ª–µ–º—ã —Å —ç–º–æ–¥–∑–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö  
    - –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
    - –ù–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
    """
    
    def __init__(self, vault_path: Path):
        self.vault_path = Path(vault_path)
        self.title_index = {}  # title -> path mapping
        self.path_index = {}   # path -> title mapping
        self._build_index()
    
    def _build_index(self):
        """–°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –≤ vault"""
        self.title_index.clear()
        self.path_index.clear()
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ .md —Ñ–∞–π–ª—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        for md_file in self.vault_path.rglob("*.md"):
            if not md_file.is_file():
                continue
                
            try:
                title = md_file.stem
                relative_path = md_file.relative_to(self.vault_path)
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º title –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
                normalized_title = self._normalize_title(title)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è
                unique_key = self._create_unique_key(title, relative_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏–Ω–¥–µ–∫—Å—ã - –∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ!
                self.title_index[title] = relative_path
                if normalized_title != title:  # –ò–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
                    self.title_index[normalized_title] = relative_path
                if unique_key != title:  # –ò–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
                    self.title_index[unique_key] = relative_path
                
                # –û–±—Ä–∞—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                self.path_index[str(relative_path)] = title
                
            except Exception as e:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
                continue
    
    def _normalize_title(self, title: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞"""
        # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        normalized = unicodedata.normalize('NFKD', title)
        
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Ç–æ–∂–µ)
        emoji_pattern = re.compile(
            r'[\U0001F600-\U0001F64F]|'  # emoticons
            r'[\U0001F300-\U0001F5FF]|'  # symbols & pictographs
            r'[\U0001F680-\U0001F6FF]|'  # transport & map symbols
            r'[\U0001F1E0-\U0001F1FF]|'  # flags
            r'[\U00002702-\U000027B0]|'  # dingbats
            r'[\U000024C2-\U0001F251]'   # enclosed characters
        )
        
        no_emoji = emoji_pattern.sub('', title).strip()
        return no_emoji if no_emoji else title
    
    def _create_unique_key(self, title: str, path: Path) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –Ω–∞–∑–≤–∞–Ω–∏–π"""
        if path.parent == Path('.'):
            return title  # –í –∫–æ—Ä–Ω–µ
        
        folder = path.parent.name
        return f"{title} ({folder})"
    
    def find_note(self, title: str) -> Optional[Path]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤ –ª—é–±–æ–π –ø–∞–ø–∫–µ vault.
        
        –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞:
        1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        2. –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–±–µ–∑ —ç–º–æ–¥–∑–∏)
        3. Case-insensitive –ø–æ–∏—Å–∫
        4. –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        5. Fuzzy matching
        """
        if not title:
            return None
        
        # 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if title in self.title_index:
            path = self.vault_path / self.title_index[title]
            if path.exists():
                return path
        
        # 2. –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        normalized_title = self._normalize_title(title)
        if normalized_title != title and normalized_title in self.title_index:
            path = self.vault_path / self.title_index[normalized_title]
            if path.exists():
                return path
        
        # 3. Case-insensitive –ø–æ–∏—Å–∫
        title_lower = title.lower()
        for indexed_title, relative_path in self.title_index.items():
            if indexed_title.lower() == title_lower:
                path = self.vault_path / relative_path
                if path.exists():
                    return path
        
        # 4. –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É)
        for indexed_title, relative_path in self.title_index.items():
            if title in indexed_title or indexed_title in title:
                path = self.vault_path / relative_path
                if path.exists():
                    return path
        
        # 5. Fuzzy matching –¥–ª—è —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤
        for indexed_title, relative_path in self.title_index.items():
            if self._fuzzy_match(title, indexed_title):
                path = self.vault_path / relative_path
                if path.exists():
                    return path
        return None
    
    def _fuzzy_match(self, title1: str, title2: str, threshold: float = 0.8) -> bool:
        """–ù–µ—á–µ—Ç–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π"""
        # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏
        norm1 = self._normalize_title(title1).lower().strip()
        norm2 = self._normalize_title(title2).lower().strip()
        
        if not norm1 or not norm2:
            return False
        
        # Levenshtein distance approximation
        longer = norm1 if len(norm1) > len(norm2) else norm2
        shorter = norm2 if len(norm1) > len(norm2) else norm1
        
        if len(longer) == 0:
            return True
        
        # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ - –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        matches = sum(1 for a, b in zip(longer, shorter) if a == b)
        similarity = matches / len(longer)
        
        return similarity >= threshold
    
    def find_multiple(self, title: str, limit: int = 10) -> List[Tuple[str, Path]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–º–µ—Ç–æ–∫, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ"""
        results = []
        
        title_lower = title.lower()
        for indexed_title, relative_path in self.title_index.items():
            if (title_lower in indexed_title.lower() or 
                indexed_title.lower() in title_lower):
                
                full_path = self.vault_path / relative_path
                if full_path.exists():
                    results.append((indexed_title, full_path))
                    
                if len(results) >= limit:
                    break
        
        return results
    
    def get_all_notes(self) -> List[Tuple[str, Path]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ vault"""
        results = []
        
        for title, relative_path in self.path_index.items():
            full_path = self.vault_path / relative_path
            if full_path.exists():
                results.append((self.path_index[title], full_path))
        
        return results
    
    def refresh_index(self, changed_files: Optional[List[Path]] = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å (–¥–ª—è real-time sync)"""
        if changed_files is None:
            # –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
            self._build_index()
        else:
            # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            for file_path in changed_files:
                try:
                    if file_path.suffix == '.md':
                        if file_path.exists():
                            # –§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω/—Å–æ–∑–¥–∞–Ω
                            title = file_path.stem
                            relative_path = file_path.relative_to(self.vault_path)
                            normalized_title = self._normalize_title(title)
                            unique_key = self._create_unique_key(title, relative_path)
                            
                            self.title_index[title] = relative_path
                            self.title_index[normalized_title] = relative_path
                            self.title_index[unique_key] = relative_path
                            self.path_index[str(relative_path)] = title
                        else:
                            # –§–∞–π–ª —É–¥–∞–ª–µ–Ω
                            relative_path = file_path.relative_to(self.vault_path)
                            title = self.path_index.get(str(relative_path))
                            
                            if title:
                                # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
                                self.title_index.pop(title, None)
                                self.title_index.pop(self._normalize_title(title), None)
                                self.path_index.pop(str(relative_path), None)
                                
                except Exception:
                    continue
    
    def get_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è debugging"""
        return {
            "total_notes": len(self.path_index),
            "indexed_titles": len(self.title_index),
            "vault_path": str(self.vault_path),
            "sample_titles": list(self.path_index.values())[:10]
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π finder –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (singleton pattern)
_finder_cache = {}

def get_universal_finder(vault_path: Path) -> UniversalNoteFinder:
    """–ü–æ–ª—É—á–∏—Ç—å UniversalNoteFinder —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    vault_str = str(vault_path)
    
    if vault_str not in _finder_cache:
        _finder_cache[vault_str] = UniversalNoteFinder(vault_path)
    
    return _finder_cache[vault_str]


def refresh_finder_cache(vault_path: Path, changed_files: Optional[List[Path]] = None):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à finder'–∞"""
    vault_str = str(vault_path)
    
    if vault_str in _finder_cache:
        _finder_cache[vault_str].refresh_index(changed_files)
    else:
        _finder_cache[vault_str] = UniversalNoteFinder(vault_path)

#!/usr/bin/env python3
"""
–£–¥–æ–±–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ Obsidian
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python run.py              # stdio —Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  python run.py --sse         # SSE —Ä–µ–∂–∏–º –Ω–∞ –ø–æ—Ä—Ç—É 8000
  python run.py --http        # HTTP —Ä–µ–∂–∏–º –Ω–∞ –ø–æ—Ä—Ç—É 8000
  python run.py --port 9000   # –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç
  python run.py --test        # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
"""

import argparse
import asyncio
import os
import subprocess
import sys
from pathlib import Path


def run_server(transport="stdio", port=8000):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç MCP —Å–µ—Ä–≤–µ—Ä"""
    
    # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É, –∑–∞—Ç–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫
    config_file = Path("obsidian_mcp_config.yaml")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Python –º–æ–¥—É–ª—å
    cmd = [sys.executable, "-m", "obsidian_mcp.server"]
    
    if transport != "stdio":
        cmd.extend(["--transport", transport])
        cmd.extend(["--port", str(port)])
    
    if config_file.exists():
        cmd.extend(["--config", str(config_file)])
        
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é MCP —Å–µ—Ä–≤–µ—Ä: {' '.join(cmd)}")
    print(f"üìÇ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'–Ω–∞–π–¥–µ–Ω–∞' if config_file.exists() else '–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}")
    print("=" * 50)
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
        env = os.environ.copy()
        src_path = str(Path(__file__).parent / "src")
        current_path = env.get("PYTHONPATH", "")
        env["PYTHONPATH"] = src_path + (os.pathsep + current_path if current_path else "")
        
        subprocess.run(cmd, check=True, env=env)
    except KeyboardInterrupt:
        print("\n‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except FileNotFoundError:
        print("‚ùå –û—à–∏–±–∫–∞: –ø–∞–∫–µ—Ç obsidian_mcp –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install -e .")
        return 1
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return 1
    return 0


async def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç smoke —Ç–µ—Å—Ç—ã"""
    print("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        result = subprocess.run([sys.executable, "tests/smoke_client.py"], 
                              capture_output=True, text=True, check=False)
        print("STDOUT:", result.stdout)
        if result.stderr:
            print("STDERR:", result.stderr)
        
        if result.returncode == 0:
            print("‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {result.returncode})")
        return result.returncode
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        return 1


def main():
    parser = argparse.ArgumentParser(description="Obsidian MCP Server Launcher")
    
    # –†–µ–∂–∏–º—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    transport_group = parser.add_mutually_exclusive_group()
    transport_group.add_argument("--sse", action="store_true", 
                               help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ SSE —Ä–µ–∂–∏–º–µ")
    transport_group.add_argument("--http", action="store_true", 
                               help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ HTTP —Ä–µ–∂–∏–º–µ")
    
    parser.add_argument("--port", type=int, default=8000, 
                       help="–ü–æ—Ä—Ç –¥–ª—è SSE/HTTP (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8000)")
    parser.add_argument("--test", action="store_true", 
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤–º–µ—Å—Ç–æ —Å–µ—Ä–≤–µ—Ä–∞")
    
    args = parser.parse_args()
    
    if args.test:
        return asyncio.run(run_tests())
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    transport = "stdio"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if args.sse:
        transport = "sse"
    elif args.http:
        transport = "streamable-http"
    
    return run_server(transport, args.port)


if __name__ == "__main__":
    sys.exit(main())

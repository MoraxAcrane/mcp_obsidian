#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import subprocess
import sys
from pathlib import Path


def run_simple_server():
    """–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Å—Ç–æ–π MCP —Å–µ—Ä–≤–µ—Ä (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)...")
    print("üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: mcp, PyYAML, python-frontmatter")
    print("üéØ –ë–µ–∑ torch, transformers, spacy, nltk - –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫!")
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    cmd = [sys.executable, "-c", "from obsidian_mcp.simple_server import main; import asyncio; asyncio.run(main())"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
    config_file = Path("obsidian_mcp_config.yaml")
    if config_file.exists():
        cmd.extend(["--config", str(config_file)])
        print(f"üìÇ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ vault
        try:
            import yaml
            with open(config_file, 'r', encoding='utf-8') as f:
                config_data = yaml.safe_load(f)
                vault_path = config_data.get('vault', {}).get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')
                print(f"üóÇÔ∏è Vault: {vault_path}")
        except:
            pass
    else:
        print("üìÇ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (./vault)")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env = os.environ.copy()
    src_path = str(Path(__file__).parent / "src")
    current_path = env.get("PYTHONPATH", "")
    env["PYTHONPATH"] = src_path + (os.pathsep + current_path if current_path else "")
    
    print("=" * 50)
    print("üì° MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    print("üîß –î–æ—Å—Ç—É–ø–Ω–æ 6 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: list_notes, create_note, read_note, update_note, delete_note, create_link")
    print("=" * 50)
    
    try:
        subprocess.run(cmd, env=env, check=True)
    except KeyboardInterrupt:
        print("\n‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(run_simple_server())

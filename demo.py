#!/usr/bin/env python3
"""
üé¨ Enhanced Obsidian MCP Server - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è

–ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫, –ø–æ–∏—Å–∫, —á—Ç–µ–Ω–∏–µ.
"""

import asyncio
import sys
import json
from pathlib import Path

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ MCP –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –¥–µ–º–æ
try:
    from mcp import ClientSession, StdioServerParameters
    from mcp.client.stdio import stdio_client
except ImportError:
    print("‚ùå MCP –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install -e .")
    sys.exit(1)

async def demo_mcp_server():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    
    print("üé¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ENHANCED OBSIDIAN MCP SERVER")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_file = Path("obsidian_mcp_config.yaml")
    if not config_file.exists():
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python setup.py")
        return
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
    print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä...")
    
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        server_params = StdioServerParameters(
            command="python",
            args=["-m", "obsidian_mcp.server", "--config", str(config_file)]
        )
        
        async with stdio_client(server_params) as (read, write):
            async with ClientSession(read, write) as session:
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                await session.initialize()
                print("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω!")
                
                # –î–µ–º–æ 1: –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
                print("\nüìã –î–ï–ú–û 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫")
                print("-" * 40)
                
                result = await session.call_tool("list_notes", {"limit": 5})
                if result.content:
                    content = json.loads(result.content[0].text)
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: {content.get('count', 0)}")
                    for note in content.get('notes', [])[:3]:
                        print(f"  üìù {note['title']} ({note.get('modified', '–¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')})")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫")
                
                # –î–µ–º–æ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
                print("\n‚úèÔ∏è –î–ï–ú–û 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏")
                print("-" * 40)
                
                test_note_title = "MCP Demo Note"
                test_content = """# –î–µ–º–æ –∑–∞–º–µ—Ç–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è Enhanced Obsidian MCP Server!

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞:
- ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
- üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π  
- üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∑–∞–º–µ—Ç–∫–∞–º–∏
- ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏

## –¢–µ–≥–∏
#demo #mcp-server #obsidian

*–°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–º–æ-—Å–∫—Ä–∏–ø—Ç–æ–º*
"""
                
                try:
                    result = await session.call_tool("create_note", {
                        "title": test_note_title,
                        "content": test_content
                    })
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: {test_note_title}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ó–∞–º–µ—Ç–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
                
                # –î–µ–º–æ 3: –ß—Ç–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
                print("\nüìñ –î–ï–ú–û 3: –ß—Ç–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏")
                print("-" * 40)
                
                try:
                    result = await session.call_tool("read_note", {
                        "title": test_note_title,
                        "include_backlinks": True
                    })
                    if result.content:
                        content = json.loads(result.content[0].text)
                        print(f"üìù –ó–∞–º–µ—Ç–∫–∞: {content['title']}")
                        print(f"üìè –î–ª–∏–Ω–∞: {len(content['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
                        print(f"üîó –ò—Å—Ö–æ–¥—è—â–∏–µ —Å—Å—ã–ª–∫–∏: {len(content.get('outlinks', []))}")
                        print(f"üîô –í—Ö–æ–¥—è—â–∏–µ —Å—Å—ã–ª–∫–∏: {len(content.get('backlinks', []))}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {e}")
                
                # –î–µ–º–æ 4: –£–º–Ω—ã–π –ø–æ–∏—Å–∫ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                print("\nüîç –î–ï–ú–û 4: –£–º–Ω—ã–π –ø–æ–∏—Å–∫")
                print("-" * 40)
                
                try:
                    result = await session.call_tool("explore_notes", {
                        "keywords": "demo mcp",
                        "limit": 3
                    })
                    if result.content:
                        content = json.loads(result.content[0].text)
                        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: {content.get('total_found', 0)}")
                        for note in content.get('results', [])[:2]:
                            relevance = note.get('relevance', 0)
                            print(f"  üìù {note['title']} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance:.1f})")
                    else:
                        print("‚ùå –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                except Exception as e:
                    print(f"‚ö†Ô∏è Explore_notes –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    
                    # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    try:
                        result = await session.call_tool("list_notes", {"limit": 3})
                        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞")
                    except:
                        pass
                
                print("\n" + "=" * 60)
                print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
                print("=" * 60)
                
                print("\nüìã –ß–¢–û –í–´ –í–ò–î–ï–õ–ò:")
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É")
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫")
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏") 
                print("‚úÖ –ß—Ç–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏")
                print("‚úÖ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)")
                
                print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
                print("1. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —Å Cursor IDE –∏–ª–∏ Claude Desktop")
                print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ setup.py")
                print("3. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —É–º–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π —Å –∑–∞–º–µ—Ç–∫–∞–º–∏!")
                
                print(f"\nüìÅ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {test_note_title}")
                print("üí° –ù–∞–π–¥–∏—Ç–µ –µ—ë –≤ —Å–≤–æ–µ–º Obsidian Vault")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print("\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
        print("1. MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: python setup.py")
        print("2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ obsidian_mcp_config.yaml")
        print("3. Obsidian Vault –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ"""
    try:
        asyncio.run(demo_mcp_server())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
